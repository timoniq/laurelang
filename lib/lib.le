int natural = 1...
int natural* = 0...

// Read docs at /docs/builtin.md#integer-add
// ```a + b = c;
// +(a, b) = c;```
: ?+(int, int) -> int.

// Read docs at /docs/builtin.md#integer-subtract
// ```a - b = c;
// -(a, b) = c;```
: ?-(int, int) -> int.

// Multiplication predicate
: ?*(int, int) -> int.

// Integer division predicate
: ?/(int, int) -> int.

// `Greater than` constraint
// read docs at /docs/builtin.md#constraints
: #>(int, int).
// `Less than` constraint
// read docs at /docs/builtin.md#constraints
: #<(int, int).

#>(x, y) {__>(x, y)}
#<(x, y) {__>(y, x)}

: #>eq(int, int).
#>eq(x, y) when x __gte y.

: #<eq(int, int).
#<eq(x, y) when y >eq x.

?+(x, y) -> x __+ y.
?-(y + z, y) -> z.
?*(x, y) -> x __* y.
?/(x * y, y) -> x.

// math `sqrt` predicate
: ?sqrt(int) -> int.
?sqrt(0) -> 0.
?sqrt(1) -> 1.
?sqrt(x) -> __sqrt(x).

// Plus-minus predicate.
// ```x = (-b +- sqrt(D)) / (2 * a)```
: ?+-(int, int) -> int.

?+-(x, y) -> z {
    z = x + y;
}

?+-(x, y) -> z {
    z = x - y;
}

// Integer pow predicate
: ?pow(int, int) -> int.
?pow(x, 0) -> 1.
?pow(x, 1) -> x.

?pow(Value, Pow) -> R {
    Pow > 1;
    R = Value * pow(Value, Pow - 1);
}

// Absolute value predicate
// absolute of -5 = 5
: ?absolute(int) -> int.
?absolute(x) -> x when x __gte 0.
?absolute(x) -> -x when x < 0.

// Integer pow predicate (shortcut to `pow`)
: ?^(int, int) -> int.
?^(v, p) -> pow(v, p).

// Always failing predicate
: ?fail().

// Simple constraint
: #cons(int, int).
#cons(a, b) {
    a = b -> fail();
}

// Message predicate working with stdio
: ?message(string).
?message(m) when __message(m).

// between (boundaries secluded)
: #between(int, int) -> int.
#between(a, b) -> c when c > a, c < b.

// between (boundaries included).
// `x = 0 .. 4`
// `5 = 0 .. 4 -> fail()`
: #..(int, int) -> int.
#..(a, b) -> c when c >eq a, c <eq b.